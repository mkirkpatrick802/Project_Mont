// Copyright Voxel Plugin SAS. All Rights Reserved.

#pragma once

#include "VoxelMinimal.isph"

enum EVoxelLandscapeVolumeBlendMode
{
	BlendMode_Additive,
	BlendMode_Subtractive,
};

FORCEINLINE void ApplyVolume(
	uniform float Distances[],
	const varying int32 IndexX,
	const uniform int32 IndexY,
	const uniform int32 IndexZ,
	const uniform int32 StrideX,
	const uniform int32 StrideXY,
	const uniform EVoxelLandscapeVolumeBlendMode BlendMode,
	const uniform float Smoothness,
	const varying float NewDistance)
{
	const varying int32 Index = IndexX + IndexY * StrideX + IndexZ * StrideXY;
	const varying float OldDistance = Distances[Index];

	switch (BlendMode)
	{
	default: VOXEL_ASSUME(false);
	case BlendMode_Additive:
	{
		if (intbits(OldDistance) == 0xFFFFFFFF)
		{
			Distances[Index] = NewDistance;
			return;
		}

		Distances[Index] = SmoothMin(OldDistance, NewDistance, Smoothness);
	}
	break;
	case BlendMode_Subtractive:
	{
		if (intbits(OldDistance) == 0xFFFFFFFF)
		{
			return;
		}

		Distances[Index] = SmoothMax(OldDistance, -NewDistance, Smoothness);
	}
	break;
	}
}